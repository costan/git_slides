h1. Branches

bq. A set of files under version control may be *branched* or forked at a point in time so that, from that time forward, two copies of those files may develop at different speeds or in different ways independently of each other.

"Wikipedia - Revision Control":http://en.wikipedia.org/wiki/Revision_control

h1. Git Commits vs Trees

<div style="text-align: center;">
!{text-align:center;width:95%;}images/commits_trees.png!
</div>

h1. Git Branches vs Commits, Trees

<div style="text-align: center;">
!{text-align:center;width:95%;}images/commits_trees_branches.png!
</div>

h1. Git Branches

A branch is a named pointer to a commit.

Branches have
* a name, e.g. @master@
* a commit name, e.g. @7b3087613bee8487e11e9d8f832b70e2b025f3a1@

h1. Git Branch Lifecycle

<div style="text-align: center;">
!{text-align:center;height:70%;}images/more_branches.png!
</div>

h1. Git Branch Lifecycle

<div style="text-align: center;">
!{text-align:center;height:70%;}images/branch_lifecycle.png!
</div>

h1. HEAD: Which Branch Am I Working On?

<div style="text-align: center;">
!{text-align:center;height:70%;}images/branch_head.png!
</div>

h1. HEAD

* @HEAD@ is the name of the branch that you're working on.
* Now you have a complete understanding of the Git object model!

h1. Branch Discipline

There is no single solution. I like this one.

Integration vs feature branches
* Integration branches "collect" topic branches
* No commits on integration branches
* A feature branches off an integration branch
* Feature branches are merged back into integration branches
* No merging into integration branches

h1. Branch Discipline

Two special integration branches for Web development.
* @master@, a.k.a. _mainline_: all features are branched off and merged into it
* @prod@  is what's running on production
 